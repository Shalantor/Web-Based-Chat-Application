<!doctype html>
<html>

<head>
  <title> Temporary login page to verify login functionality </title>
  <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.2/css/bootstrap.min.css">
  <link rel="stylesheet" href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css">
  <link rel="stylesheet" type="text/css" href="/css/chat.css">
</head>

<body>

  <!-- Navigation bar -->
  <div class="container">

    <nav class="navbar navbar-default">
      <div class="container-fluid">
        <div class="navbar-header">
          <a class="navbar-brand" href="/profile">
            <img alt = "Brand" src="public/brand.png"> <!-- TODO:Check why image doesnt get rendered -->
          </a>
        </div>
        <a href="/logout" class="btn btn-default navbar-btn navbar-right" href="/logout">Logout</a>
      </div>
    </nav>

  </div>

  <div class = "content">
    <div class = "left">
      <div class="friendsWindow">
        <p>Friends</p>
        <ul id="friends">
        <ul/>
      </div>
      <div class="groupsWindow">
        <p>Groups</p>
        <ul id=groups>
        <ul/>
      </div>
    </div>


    <div class = "middle">
      <div class="chat_window">
        <ul class="chat_history">
        <ul/>
      </div>

      <div class = "chatForm">
        <form action= "" >
          <input id="message" autocomplete="off" /><button>Send</button>
        </form>
      </div>
    </div>

    <div class = "right">
      <div class = "findUserForm">
        <form action= "" >
          <input id="search" autocomplete="off" /><button>Find friend</button>
        </form>
        <ul id="users_found">
        <ul/>
      </div>
      <div class = "createGroup">
        <button id="open_group_menu">Create Group</button>
          <div class = "group_menu_buttons">
            <button id="close_menu">Close</button>
            <button id="create_group">Create Group</button>
          </div>
          <div class = "group_menu">
          <form class = "group_name" action= "" >
            <p>Group Name:</p><input autocomplete="off" />
          </form>
          <form class = "search_for_group" action= "" >
            <input autocomplete="off" /><button>Add</button>
          </form>
        </div>
        <ul id="user_for_group">
        <ul/>
      </div>
  </div>

<!-- Script to send server a request to look for friends-->
<script src="/socket.io/socket.io.js"></script>
<script src="https://code.jquery.com/jquery-1.11.1.js"></script>
<script>
  /*Set up user data*/
  var socket = io();
  socket.on('ehlo',function(msg){
    /*Disable form if no friend selected to chat with*/
    $('.chatForm :input').prop('disabled', true);
    socket.emit('ehlo-response',<%- JSON.stringify(user) %>);
    $.each(<%- JSON.stringify(user.friends) %>,function(key,friend){
        $('#friends').append('<li><div class="friend"><span class="fa fa-user"></span>' + ' ' + friend.username + '<p id = friendId>' + friend.id +  '</p></div></li>');
    });
    $.each(<%- JSON.stringify(user.groups) %>,function(key,group){
        $('#groups').append('<li><div class="group_item"><span class="fa fa-user"></span><p class="name">' + ' ' + group.name + ' </p><p class="id">' + group.id +  '</p></div></li>');
    });
  });

  /*Function to send server request for a friend*/
  $(function () {
    $('.findUserForm form').submit(function(){
      socket.emit('find-user', { 'id': <%- JSON.stringify(user._id) %> , 'name': $('#search').val() });
      $('#search').val('');
      return false;
    });
    socket.on('find-user-response', function(users){
      $.each(users,function(index,user){
          $('#users_found').append('<li><div class="found_user_item"><span class="fa fa-user"></span><p class="name">' + user.name + '</p><button>Delete</button><p class="id">' + user.id +  '</p></div></li>');
      });
    });
  });

  /*Send server a specific friend id to add*/
  $(function() {
    $('#users_found').on('click','.found_user_item button',function(){
      var info = {};
      info.otherUser =  $(this).siblings('.id').text();
      info.thisUser = <%- JSON.stringify(user) %>;
      info.otherUserName = $(this).siblings('.name').text();
      socket.emit('add-user', info );
      $('#users_found').empty();
    });
    socket.on('add-user-response',function(user){
      $('#friends').append('<li><div class="friend"><span class="fa fa-user"></span>' + ' ' + user.name + '<p id = friendId>' + user.id +  '</p></div></li>');
    });
  });

  /*Make the clicked friend, the active one the user is chatting with and also show chat history*/
  $(function(){
    $('#friends').on('click','li',function(){
      $('.chatForm :input').prop('disabled', false);
      $('.active_friend').removeClass('active_friend');
      $(this).addClass('active_friend');
      $('.chat_history').empty();
      var data = {};
      data.userId = <%- JSON.stringify(user._id) %>;
      data.friendId = $('.active_friend #friendId').text();
      socket.emit('get-chat-history',data);
    });
    socket.on('get-chat-history-response',function(messages){
      $.each(messages,function(index,info){
        if (info.from == 'me'){
          $('.chat_history').append('<li class="my_message"><p>' + info.message + '</p></li>');
        }
        else if (info.from == 'not_me'){
          $('.chat_history').append('<li class="other_message"><p>' + info.message + '</p></li>');
        }
      });
      var log = $('.chat_window');
      log.animate({ scrollTop: log.prop('scrollHeight')}, 0);
    });
  });

  /*Function so send message to server from chat window*/
  $(function () {
    $('.chatForm form').submit(function(){
      var thisUser = <%- JSON.stringify(user._id) %>;
      var otherUser = $('.active_friend #friendId').text();
      var message = $('#message').val();
      socket.emit('send-message',{ 'thisUser' : thisUser, 'otherUser' : otherUser, 'message' : message });
      $('.chat_history').append('<li class="my_message"><p>' + message + '</p></li>');
      var log = $('.chat_window');
      log.animate({ scrollTop: log.prop('scrollHeight')}, 0);
      $('#message').val('');
      return false;
    });
    socket.on('send-message-response',function(data){
      /*Data is null for user that sent data*/
      /*Also if the user that send this message is not the selected one don't show text*/
      var activeFriend = JSON.stringify($('.active_friend #friendId').text());
      var fromUser = JSON.stringify(data.fromId);
      if (data != null && activeFriend === fromUser){
        $('.chat_history').append('<li class="other_message"><p>' + data.message + '</p></li>');
        var log = $('.chat_window');
        log.animate({ scrollTop: log.prop('scrollHeight')}, 0);
      }
    });
  });

  /*Click listener for create group button, to open menu*/
  $(function () {
    $('#open_group_menu').click(function(){
      $('.group_menu').show();
      $('.group_menu_buttons').show()
      $(this).hide();
    });
  });

  /*Close the group menu*/
  $(function () {
    $('#close_menu').click(function(){
      $('.group_menu').hide();
      $('.group_menu_buttons').hide()
      $('#open_group_menu').show();
    });
  });

  /*listener for button that send server request to find specific
  *User and add to list of members in a group that gets created*/
  $(function () {
    $('.search_for_group button').click(function(){
      var username = $('.search_for_group input').val();
      var id = <%- JSON.stringify(user._id) %>;
      $('.search_for_group input').val('');
      socket.emit('add-user-group',{'id': id, 'name' : username });
    });
    socket.on('add-user-group-response', function(users){
      $.each(users,function(index,user){
          $('#user_for_group').append('<li><div class="found_user_item"><span class="fa fa-user"></span><p class="name">' + ' ' + user.name + ' </p><button id="delete_button">Delete</button><p class="id">' + user.id +  '</p></div></li>');
      });
    });
  });

  /*Listener for button to delete user from group , on creation time*/
  $(function () {
    $('#user_for_group').on('click','#delete_button',function(){
      $(this).closest('li').remove();
    });
  });

  /*Remove warning class from input in group form, so that it wont be red*/
  $(function (){
    $('.group_name input').click(function(){
      $('.group_name input').removeClass('warning');
      $('.group_name input').attr('placeholder','');
    });
  });

  /*Send server data for group to be created*/
  $(function (){
    $('#create_group').click(function(){
      if ( $('.group_name input').val() === '' ){
        $('.group_name input').attr('placeholder','Group name can\'t be empty');
        $('.group_name input').addClass('warning');
      }
      else if ( !($('#user_for_group li').length === 0) ){
        var data = {};
        data.groupName = $('.group_name input').val();
        $('.group_name input').val('')
        data.users = [];
        data.users.push( <%- JSON.stringify(user._id) %> );
        $('#user_for_group li').each(function(index){
          var userToAdd = $(this).find('.id').text();
          data.users.push(userToAdd);
        });
        $('#user_for_group').empty();
        socket.emit('create-group',data);
      }
    });
    socket.on('create-group-response', function(data){
      $('#groups').append('<li><div class="group_item"><span class="fa fa-user"></span><p class="name">' + ' ' + data.name + ' </p><p class="id">' + data.id +  '</p></div></li>');
    });
  });

</script>

</body>

</html>
